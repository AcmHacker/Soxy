#!/bin/bash

script_path=$(dirname $(readlink -f $0))

## LOAD SOXY CONFIG
########################################

source $script_path/soxy.config

## SCRIPT VARS, DON'T MODIFY
########################################

LOCK_FILE=/tmp/soxy.lock

## COLOR & STYLE VARS, DON'T MODIFY
########################################

BLACK="30"
RED="31"
GREEN="32"
YELLOW="33"
BLUE="34"
WHITE="37"

NONE="0"
BOLD="1"
UNDERLINE="4"

## FUNCTIONS
########################################

function getPid {
    # Get the PID
    PID=$(ps ax | grep ssh | grep $LOCAL_PORT | awk '{ print $1 }')

    # Return the PID
    echo $PID
}

function startSocks {
    # Echo status message to console
    printf "Starting SOCKS proxy on port %-6s    " $LOCAL_PORT

    if [ ! -f $LOCK_FILE ]; then
        # Establish SOCKS connection
        ssh -qfCD $LOCAL_PORT $REMOTE_USER@$REMOTE_HOST -p $REMOTE_PORT -N & > /dev/null 2>&1

        # Create the lock file
        touch $LOCK_FILE

        # Echo status message to console
        echo "[ $(colorMsg OK $GREEN $BOLD) ]"
    else
        echo "[$(colorMsg FAIL $RED $BOLD $BLACK)]"
        echo "SOCKS proxy already running, try restarting"
    fi

}

function stopSocks {
    # Echo status message to console
    printf "Stopping SOCKS proxy with PID %-6s   " $(getPid)

    # Kill the process
    kill $(getPid) > /dev/null 2>&1

    # Remove the PID file
    if [ -f $LOCK_FILE ]; then
        rm -f $LOCK_FILE
    fi

    # Echo status message to console
    echo "[ $(colorMsg OK $GREEN $BOLD) ]"
}

function colorMsg {
    # Get the message value
    MESSAGE=$1

    # Get the color and style values
    COLOR=${2:-$WHITE}  # Defaults to black, if not specified.
    STYLE=${3:-$NONE}   # Defaults to none, if not specified.
    BG=${4:-$BLACK}  # Defaults to black, if not specified.

    # Echo the message with specified colors
    echo -e "\033[$STYLE;$COLOR;40m${MESSAGE}\033[m"
    return
}

## SWITCHES
########################################

case $1 in
    'start')
        startSocks
    ;;
    'stop')
        stopSocks
    ;;
    'restart')
        stopSocks
        startSocks
    ;;
    'status')
        if [ $(getPid) ]; then
            echo "SOCKS proxy running on port ${LOCAL_PORT} -- PID: $(getPid)"
        else
            echo "SOCKS proxy not currently running"
        fi
    ;;
    *)
        echo "Usage: soxy { start | stop | restart | status }"
    ;;
esac
